#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&soft_off { hold-time-ms = <2000>; };

/ { 
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        // Space hold-tap: tap=space, hold=raise layer (for single tap behavior)
        spc_raise: spc-raise {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        // Slash hold-tap: tap=slash, hold=lower layer (for double tap behavior)  
        slash_lower: slash-lower {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        // Space complex tap-dance with hold functionality
        td_space_layers: td-space-layers {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&spc_raise 1 SPACE>, <&slash_lower 2 FSLH>;
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        softoff {
            bindings = <&soft_off>;
            key-positions = <1 15 29>;
        };

        combo_caps: combo {
            timeout-ms = <50>;
            key-positions = <1 2 3>;   // Q, W, E in this exact layout
            bindings = <&kp CAPSLOCK>;
        };
        
        // j and k for left bracker and u and i for right brace { and }
        combo_brace_l: combo_brace_l {
            timeout-ms = <50>;
            key-positions = <23 24>;   // J, K
            bindings = <&kp LBRC>;
        };

        combo_brace_r: combo_brace_r {
            timeout-ms = <50>;
            key-positions = <24 25>;   // K, L
            bindings = <&kp RBRC>;
        };

        combo_bracket_l: combo_bracket_l {
            timeout-ms = <50>;
            key-positions = <8 9>;  // U, I
            bindings = <&kp LBKT>;
        };
        
        combo_bracket_r: combo_bracket_r {
            timeout-ms = <50>;
            key-positions = <9 10>;   // I, O
            bindings = <&kp RBKT>;
        };

        combo_paren_l: combo_paren_l {
            timeout-ms = <50>;
            key-positions = <37 38>;  // M, ,
            bindings = <&kp LPAR>;
        };
        
        combo_paren_r: combo_paren_r {
            timeout-ms = <50>;
            key-positions = <38 39>;   // ,, .
            bindings = <&kp RPAR>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "MAX";
            bindings = <
&mt LS(LC(LA(LGUI))) ESC &kp Q  &kp W  &kp E     &kp R  &kp T                               &kp C_VOL_UP           &kp Y        &kp U  &kp I      &kp O    &kp SEMI  &bspc_del
&kp LCTRL                &kp A  &kp S  &kp D     &kp F  &kp G                    &kp C_PREV &kp C_MUTE  &kp C_NEXT &kp H        &kp J  &kp K      &kp L    &kp P     &kp SQT
&mt LSHIFT LPAR          &kp Z  &kp X  &kp C     &kp V  &kp B        &kp SPACE              &kp C_VOL_DN         &kp N        &kp M  &kp COMMA  &kp DOT  &kp FSLH  &mo 3
                                &lt 3 TAB   &kp LGUI  &lt 2 SPACE                                      &td_space_layers  &mt LSHIFT RET  &mt RALT RPAR
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "NUMNAV";
            bindings = <
&kp ESC &kp EQUAL   &kp N7          &kp N8        &kp N9        &kp N0                                         &mmv MOVE_UP                     &kp PGUP         &kp HOME         &kp UP           &kp END          &trans       &trans
&trans  &kp PLUS    &kp N4          &kp N5        &kp N6        &kp STAR                       &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp PGDN         &kp LEFT         &kp DOWN         &kp RIGHT        &kp RCTRL    &kp F12
&trans  &kp MINUS   &kp N1          &kp N2        &kp N3        &kp SLASH        &kp C_MUTE                    &trans                           &kp F9           &kp F5           &kp LALT         &trans           &kp RG(RALT) &trans
                                         &trans        &trans        &trans                                                &trans          &trans          &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "SYMBOL";
            bindings = <
&kp C_NEXT       &kp EXCL &kp AT         &kp HASH   &kp DLLR     &kp PRCNT                            &mmv MOVE_UP                     &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp C_PLAY_PAUSE &trans   &kp C_VOL_DN   &kp C_MUTE &kp C_VOL_UP &trans               &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp C_PREV       &trans   &trans         &none      &none        &trans     &trans                    &mmv MOVE_DOWN                   &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                    &trans     &trans     &kp SPACE                                                             &kp RET    &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            display-name = "Fn";
            bindings = <
&studio_unlock  &kp F1      &kp F2     &kp F3       &kp F4     &kp F5                                  &mmv MOVE_UP                     &kp F6       &kp F7     &kp F8       &kp F9      &kp F10          &kp F11
&bt BT_CLR      &bt BT_PRV  &bt BT_NXT &mkp MCLK    &mkp RCLK  &mkp MB4                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bootloader  &mkp LCLK  &mkp MCLK    &mkp RCLK   &kp PRINTSCREEN  &kp F12
&trans          &trans      &trans     &trans       &trans     &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &trans       &trans     &bootloader  &sys_reset  &kp SCROLLLOCK   &kp PAUSE_BREAK
                                       &trans       &trans     &trans                                                                   &trans       &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
